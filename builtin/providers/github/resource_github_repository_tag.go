package github

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/google/go-github/github"
	"github.com/hashicorp/terraform/helper/schema"
)

func resourceGithubRepositoryTag() *schema.Resource {
	return &schema.Resource{
		Create: resourceGithubRepositoryTagCreate,
		Read:   resourceGithubRepositoryTagRead,
		Delete: resourceGithubRepositoryTagDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"repo": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"tag": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"commit": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"author": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
				Default:  "Terraform",
			},
			"email": &schema.Schema{
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"message": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Default:  "Tag generated by Terraform on " + time.Now().String(),
				ForceNew: true,
			},
		},
	}
}

func resourceGithubRepositoryTagCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*Organization).client

	date := time.Now()
	r := d.Get("repo").(string)
	t := d.Get("tag").(string)
	a := d.Get("author").(string)
	c := d.Get("commit").(string)
	m := d.Get("message").(string)
	e := d.Get("email").(string)

	objectType := "commit"

	url := fmt.Sprintf(
		"https://api.github.com/repos/%s/%s/git/commits/%s",
		meta.(*Organization).name,
		r,
		c,
	)

	obj := &github.GitObject{
		Type: &objectType,
		SHA:  &c,
		URL:  &url,
	}

	author := &github.CommitAuthor{
		Date:  &date,
		Email: &e,
		Name:  &a,
	}

	tag := &github.Tag{
		Tag:     &t,
		SHA:     &c,
		Tagger:  author,
		Message: &m,
		Object:  obj,
	}

	// Create the git tag
	release, resp, err := client.Git.CreateTag(meta.(*Organization).name, r, tag)
	if err != nil {
		return fmt.Errorf("%v: from GitHub", err)
	}

	log.Printf("[DEBUG] creating github tag in %s/%s. URL: %s", meta.(*Organization).name, r, *release.URL)

	raw, err := json.Marshal(resp.Response.Body)
	log.Printf("[DEBUG] github tag creation response: %v\nerr:%v", string(raw), err)

	// Create our git ref for the tag
	ref := fmt.Sprintf("refs/tags/%s", t)

	client.Git.CreateRef(meta.(*Organization).name, r, &github.Reference{
		Ref:    &ref,
		Object: obj,
	})

	d.Set("url", *release.URL)
	d.Set("sha", *release.SHA)
	return nil
}

func resourceGithubRepositoryTagRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*Organization).client

	r := d.Get("repo").(string)
	s := d.Get("sha").(string)

	tag, _, err := client.Git.GetTag(meta.(*Organization).name, r, s)
	if err != nil {
		return err
	}

	d.Set("url", *tag.URL)
	d.Set("sha", *tag.SHA)

	return errors.New("not implemented")
}

func resourceGithubRepositoryTagDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*Organization).client

	r := d.Get("repo").(string)
	t := d.Get("tag").(string)

	_, err := client.Git.DeleteRef(meta.(*Organization).name, r, fmt.Sprintf("refs/tags/%s", t))

	return err
}
